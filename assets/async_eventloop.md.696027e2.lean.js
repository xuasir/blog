import{_ as n,c as s,o as a,a as t,b as o}from"./app.9629f6ad.js";const e='{"title":"事件循环","description":"","frontmatter":{},"relativePath":"async/eventloop.md","lastUpdated":1632886673269}',c={},l=[t("h4",{id:"事件循环",tabindex:"-1"},[o("事件循环 "),t("a",{class:"header-anchor",href:"#事件循环","aria-hidden":"true"},"#")],-1),t("ul",null,[t("li",null,[t("strong",null,"前言")])],-1),t("p",null,[o("本文将分别介绍浏览器环境和Node环境下的事件循环，涉及到宏任务、微任务以及**"),t("code",null,"requestAnimationCallback"),t("strong",null,"和"),t("code",null,"requestIdleCallback"),o("**的行为方式，能帮助你理解更多JavaScript运行时的异步特性。")],-1),t("ul",null,[t("li",null,[t("strong",null,"事件循环模型")])],-1),t("p",null,[o("一段来自"),t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"},"MDN"),o("对于事件循环实现的解释：")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"while"),o(),t("span",{class:"token punctuation"},"("),o("queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"waitForMessage"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"processNextMessage"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n")])])],-1),t("p",null,[o("事件循环一般会伴随这一个主进程的恒为"),t("code",null,"true"),o("的死循环，然后向任务队列不断地寻求新的任务并执行，然后再等待新的任务到来。当然实际情况是会复杂得多，但是一切的一切都是基于这样的模型来构建的。")],-1),t("h4",{id:"简单的模型建立",tabindex:"-1"},[o("简单的模型建立 "),t("a",{class:"header-anchor",href:"#简单的模型建立","aria-hidden":"true"},"#")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"bar"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'bar'"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"foo"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'foo'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token function"},"bar"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token function"},"foo"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,[o("面对这样一段待执行的代码，浏览器首先需要去执行它，我们忽略掉一系列的变量声明、赋值、提升等等内容，直接到达最后一行"),t("code",null,"foo()"),o("的调用，我们首先会将"),t("code",null,"foo"),o("函数推入执行函数栈中，类似下图：")],-1),t("blockquote",null,[t("p",null,[t("img",{src:"/blog/stack.jpg",alt:"stack"})]),t("p",null,[o("执行遇到"),t("code",null,"console.log"),o("也会将其推入执行栈中，如图：")]),t("p",null,[t("img",{src:"/blog/console-in.jpg",alt:"stack"})]),t("p",null,[t("code",null,"console.log"),o("执行完毕后，会将其从栈中推出：")]),t("p",null,[t("img",{src:"/blog/console-out.jpg",alt:"stack"})]),t("p",null,[o("遇到"),t("code",null,"bar()"),o("也是同样的操作：")]),t("p",null,[t("img",{src:"/blog/bar-in.jpg",alt:"stack"})]),t("p",null,[o("直到"),t("code",null,"foo"),o("函数执行完出栈")])],-1),t("p",null,"这是同步代码的简单执行，似乎也什么特别之处，但是如果遇到异步的任务呢？这时候就会出现异步队列的概念了，如下的一段代码：",-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"bar"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'bar'"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"foo"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  "),t("span",{class:"token function"},"setTimeout"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'foo'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token number"},"100"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token function"},"bar"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token function"},"foo"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,[o("我们将"),t("code",null,"foo"),o("函数中的"),t("code",null,"console"),o("用"),t("code",null,"setTimeout"),o("包裹起来，这样就形成了一个异步的任务；当执行到foo函数内部的时候会调用栈会形成什么样的结构呢？")],-1),t("blockquote",null,[t("p",null,[t("img",{src:"/blog/async-loop.jpg",alt:"Async-loop"})]),t("p",null,"如上图所示在遇到异步任务时，会将任务交由浏览器的Web API层处理，这与JavaScript执行所在的进程并非同一个，这样JavaScript便可以直接执行后续任务，不用关心异步任务的调度，浏览器的API层会在异步任务到期的时候将任务回调推入异步任务队列中，而JavaScript的主线程实现了类似MDN描述的事件循环，在当前执行栈清空时会去向异步任务队列取新的任务执行，这样便构建了一个简单的异步任务模型。")],-1),t("h4",{id:"微观上的任务队列",tabindex:"-1"},[o("微观上的任务队列 "),t("a",{class:"header-anchor",href:"#微观上的任务队列","aria-hidden":"true"},"#")],-1),t("p",null,"在浏览器事件循环的任务队列中实际上是将任务划分成了macrotask（宏任务）和microtask（微任务）具体的API层面表现为：",-1),t("blockquote",null,[t("p",null,"宏任务： script代码 I/O setTimeout setInterval setImmediate(node环境)"),t("p",null,"微任务： Promise.then() process.nextTick(node环境) MutaionObserver")],-1),t("p",null,"任务类型不同也决定了异步任务的推入执行队列的顺序；在整个事件循环基本可以分为以下几个步骤：",-1),t("blockquote",null,[t("ol",null,[t("li",null,"从宏任务队列头部取出一个macrotask执行（遇到微任务添加至微任务队列，timer添加至宏任务队列）"),t("li",null,"当宏任务执行完，清空microtask队列（如果在执行micro任务时，执行到micro任务会添加到本次microtask任务队列中，即出现微任务的递归调或者耗时间较长的任务用时会阻塞下一个宏任务的执行）"),t("li",null,"GUI渲染"),t("li",null,"回到步骤1，直至宏任务队列结束")])],-1),t("p",null,"我们可以将1-4完整的一次执行定义为浏览器的一帧，从描述上可以基本了解到宏任务与微任务的区别：",-1),t("ol",null,[t("li",null,"宏任务是每一帧执行一次，在当前宏任务执行中遇到新的宏任务是会放在下一帧执行的。"),t("li",null,"微任务是执行发生在当前帧宏任务执行完成后，并且在微任务中添加微任务是会造成阻塞的。"),t("li",null,"GUI渲染并不是在每一帧都会发生的这和浏览器的调度有很大的关系。")],-1),t("p",null,"接下来通过简单的代码来验证的：",-1),t("ul",null,[t("li",null,"执行顺序")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token function"},"setTimeout"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'3'"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token keyword"},"new"),o(),t("span",{class:"token class-name"},"Promise"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[o("resolve"),t("span",{class:"token punctuation"},","),o(" reject")]),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token function"},"resolve"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"res"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n\tconsole"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),o("res"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token comment"},"//-----res-----"),o("\n"),t("span",{class:"token comment"},"//1"),o("\n"),t("span",{class:"token comment"},"//2"),o("\n"),t("span",{class:"token comment"},"//3"),o("\n")])])],-1),t("p",null,"上述代码片段描述了微任务、宏任务的执行顺序。",-1),t("ul",null,[t("li",null,"宏任务循环添加不会阻塞渲染和下帧执行")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  "),t("span",{class:"token function"},"setTimeout"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'time'"),t("span",{class:"token punctuation"},")"),o("\n    "),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token number"},"1000"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token comment"},"//----res----"),o("\n"),t("span",{class:"token comment"},"//time : n"),o("\n")])])],-1),t("p",null,"在浏览器中执行这段代码并不会阻塞浏览器的交互以及渲染，这也证明了：宏任务执行中添加宏任务会在下一帧执行。",-1),t("ul",null,[t("li",null,"微任务循环添加会阻塞事件循环")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  Promise"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"resolve"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'promise'"),t("span",{class:"token punctuation"},")"),o("\n    "),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token function"},"loop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token comment"},"//---res---"),o("\n"),t("span",{class:"token comment"},"// promise : n"),o("\n")])])],-1),t("p",null,"将这段代码放在浏览器中执行后，页面将会无法响应任何操作了 ，这证明了微任务的行为方式：如果在执行micro任务时，执行到micro任务会添加到本次microtask任务队列中，微任务循环添加是会阻塞事件循环的。",-1),t("h4",{id:"requestanimationframe",tabindex:"-1"},[t("strong",null,[t("code",null,"requestAnimationFrame")]),o(),t("a",{class:"header-anchor",href:"#requestanimationframe","aria-hidden":"true"},"#")],-1),t("p",null,[t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame",target:"_blank",rel:"noopener noreferrer"},[t("strong",null,[t("code",null,"window.requestAnimationFrame()")])]),o("告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"let"),o(" div "),t("span",{class:"token operator"},"="),o(" document"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getElementById"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'id'"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token keyword"},"let"),o(" left "),t("span",{class:"token operator"},"="),o(),t("span",{class:"token number"},"0"),o("\n\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"animation"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  "),t("span",{class:"token keyword"},"if"),t("span",{class:"token punctuation"},"("),o("left "),t("span",{class:"token operator"},"<"),o(),t("span",{class:"token number"},"101"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n    div"),t("span",{class:"token punctuation"},"."),o("style"),t("span",{class:"token punctuation"},"."),o("left "),t("span",{class:"token operator"},"="),o(),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),o("left"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token string"},"px"),t("span",{class:"token template-punctuation string"},"`")]),o("\n    left "),t("span",{class:"token operator"},"+="),o(),t("span",{class:"token number"},"10"),o("\n    "),t("span",{class:"token function"},"requestAnimationFrame"),t("span",{class:"token punctuation"},"("),o("animation"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token function"},"requestAnimationFrame"),t("span",{class:"token punctuation"},"("),o("animation"),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,[o("基本的使用方式如上，"),t("code",null,"requestAnimationFrame"),o("是发生在浏览器下次绘制执行之前，也就是在上文的GUI渲染之前、微任务执行之后，这个时间节点。也是伴随着每一帧的执行，需要做一个完整的动画还得伴随这一个递归的回调函数。")],-1),t("p",null,[o("当然setTimeout也是可以完成功能的，但是"),t("code",null,"requestAnimationFrame"),o("的优势在于完全交由浏览器调度，能够保证足够的帧率以及浏览器tab切换时自动暂停等特性。")],-1),t("h4",{id:"requestidlecallback",tabindex:"-1"},[t("strong",null,[t("code",null,"requestIdleCallback")]),o(),t("a",{class:"header-anchor",href:"#requestidlecallback","aria-hidden":"true"},"#")],-1),t("p",null,[t("strong",null,[t("code",null,"window.requestIdleCallback()")]),t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer"},[t("strong",null,[t("code",null,"window.requestIdleCallback()")])]),o("方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间"),t("code",null,"timeout"),o("，则有可能为了在超时前执行函数而打乱执行顺序。")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token function"},"requestIdleCallback"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"IdleDeadline"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n  "),t("span",{class:"token keyword"},"if"),t("span",{class:"token punctuation"},"("),o("IdleDeadline"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"timeRemaining"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},">"),o(),t("span",{class:"token number"},"0"),o(),t("span",{class:"token operator"},"||"),o(" IdleDeadline"),t("span",{class:"token punctuation"},"."),o("didTimeout"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'idle time: '"),t("span",{class:"token punctuation"},","),o(" IdleDeadline"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"timeRemaining"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token punctuation"},"{"),o(" timeout"),t("span",{class:"token operator"},":"),o(),t("span",{class:"token number"},"500"),o(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,[o("可见将任务交由**"),t("code",null,"requestIdleCallback"),t("strong",null,"来执行，是会发生在浏览器一帧中的空闲时间还足够的情况下，如果浏览器很忙是会被延误的，同时也可以设置timeout来到期强制执行，当然如果浏览器不够时间而产生了超时执行是会拉长浏览器一帧时间的，这样就会让浏览器的渲染产生卡顿，而且在"),t("code",null,"requestIdleCallback"),t("strong",null,"中也不适合再度执行dom操作因为"),t("code",null,"requestIdleCallback"),t("strong",null,"发生在浏览器完成当前帧渲染之后的空闲时间来执行，如果操作dom是会导致浏览器重绘或者回流，在"),t("code",null,"requestIdleCallback"),t("strong",null,[o("中也是不适合之心"),t("code",null,"Promise.then"),o("这种微任务的，由于"),t("code",null,"Promise.then"),o("优先级较高，会在")]),t("code",null,"requestIdleCallback"),o("**执行完成后立马执行，也是会拉长浏览器一帧时间的。")],-1),t("p",null,[o("在**"),t("code",null,"requestIdleCallback"),o("**中是和执行一些微小化的任务，类似React的fiber结构这样颗粒度的遍历，是很容易做到及时让出执行权给浏览器的。")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[o("\n"),t("span",{class:"token keyword"},"let"),o(" tasks "),t("span",{class:"token operator"},"="),o(),t("span",{class:"token punctuation"},"["),o("\n  "),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    "),t("span",{class:"token function"},"sleep"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"200"),t("span",{class:"token punctuation"},")"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'任务一'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o("\n  "),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    "),t("span",{class:"token function"},"sleep"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"200"),t("span",{class:"token punctuation"},")"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'任务二'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o("\n  "),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    "),t("span",{class:"token function"},"sleep"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"200"),t("span",{class:"token punctuation"},")"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'任务三'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),o("\n"),t("span",{class:"token punctuation"},"]"),o("\n\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"run"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"deadline"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token string"},"本帧剩余时间："),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),o("deadline"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"timeRemaining"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token template-punctuation string"},"`")]),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token keyword"},"while"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),o("deadline"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"timeRemaining"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},">"),o(),t("span",{class:"token number"},"0"),o(),t("span",{class:"token operator"},"||"),o(" deadline"),t("span",{class:"token punctuation"},"."),o("didTimeout"),t("span",{class:"token punctuation"},")"),o(" \n          "),t("span",{class:"token operator"},"&&"),o(" tasks"),t("span",{class:"token punctuation"},"."),o("length "),t("span",{class:"token operator"},">"),o(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n    "),t("span",{class:"token function"},"work"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),o("\n  "),t("span",{class:"token keyword"},"if"),t("span",{class:"token punctuation"},"("),o("tasks"),t("span",{class:"token punctuation"},"."),o("length "),t("span",{class:"token operator"},">"),o(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n    "),t("span",{class:"token function"},"requestIdleCallback"),t("span",{class:"token punctuation"},"("),o("run"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token punctuation"},"{"),o(" timeout"),t("span",{class:"token operator"},":"),o(),t("span",{class:"token number"},"1000"),o(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"work"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  tasks"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"shift"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'执行完毕'"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token keyword"},"function"),o(),t("span",{class:"token function"},"sleep"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"delay"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token punctuation"},"{"),o("\n  "),t("span",{class:"token keyword"},"for"),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"let"),o(" start "),t("span",{class:"token operator"},"="),o(" Date"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"now"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),o(" Date"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"now"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"-"),o(" start "),t("span",{class:"token operator"},"<"),o(" delay"),t("span",{class:"token punctuation"},";"),o(),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),o("\n"),t("span",{class:"token punctuation"},"}"),o("\n\n"),t("span",{class:"token function"},"requestIdleCallback"),t("span",{class:"token punctuation"},"("),o("run"),t("span",{class:"token punctuation"},","),o(),t("span",{class:"token punctuation"},"{"),o(" timeout"),t("span",{class:"token operator"},":"),o(),t("span",{class:"token number"},"1000"),o(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token comment"},"//-----res-----"),o("\n"),t("span",{class:"token comment"},"//本帧剩余时间：24.360000000000003"),o("\n"),t("span",{class:"token comment"},"// 任务一"),o("\n"),t("span",{class:"token comment"},"// 执行完毕"),o("\n"),t("span",{class:"token comment"},"// 本帧剩余时间：49.915"),o("\n"),t("span",{class:"token comment"},"// 任务二"),o("\n"),t("span",{class:"token comment"},"// 执行完毕"),o("\n"),t("span",{class:"token comment"},"// 本帧剩余时间：49.97500000000001"),o("\n"),t("span",{class:"token comment"},"// 任务三"),o("\n"),t("span",{class:"token comment"},"// 执行完毕"),o("\n")])])],-1),t("p",null,"当我将每个任务睡眠200ms时一帧内是无法完成三个任务的，这三个任务也分别分配到了三帧中执行。",-1),t("h4",{id:"node中的event-loop",tabindex:"-1"},[o("Node中的event loop "),t("a",{class:"header-anchor",href:"#node中的event-loop","aria-hidden":"true"},"#")],-1),t("p",null,"node中的事件循环大致分成以下几个模块组成：",-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[o("   ┌───────────────────────────┐\n\n┌─"),t("span",{class:"token operator"},">"),o("│           timers          │\n\n│  └─────────────┬─────────────┘\n\n│  ┌─────────────┴─────────────┐\n\n│  │     pending callbacks     │\n\n│  └─────────────┬─────────────┘\n\n│  ┌─────────────┴─────────────┐\n\n│  │       idle"),t("span",{class:"token punctuation"},","),o(" prepare       │\n\n│  └─────────────┬─────────────┘      ┌───────────────┐\n\n│  ┌─────────────┴─────────────┐      │   incoming"),t("span",{class:"token operator"},":"),o("   │\n\n│  │           poll            │"),t("span",{class:"token operator"},"<"),o("─────┤  connections"),t("span",{class:"token punctuation"},","),o(" │\n\n│  └─────────────┬─────────────┘      │   data"),t("span",{class:"token punctuation"},","),o(" etc"),t("span",{class:"token punctuation"},"."),o("  │\n\n│  ┌─────────────┴─────────────┐      └───────────────┘\n\n│  │           check           │\n\n│  └─────────────┬─────────────┘\n\n│  ┌─────────────┴─────────────┐\n\n└──┤      close callbacks      │\n\n   └───────────────────────────┘\n")])])],-1),t("ul",null,[t("li",null,[t("p",null,[t("em",null,[t("strong",null,"定时器")]),o("：本阶段执行已经被 "),t("code",null,"setTimeout()"),o(" 和 "),t("code",null,"setInterval()"),o(" 的调度回调函数。")])]),t("li",null,[t("p",null,[t("em",null,[t("strong",null,"待定回调")]),o("：执行延迟到下一个循环迭代的 I/O 回调。")])])],-1),t("ul",null,[t("li",null,[t("em",null,[t("strong",null,"idle, prepare")]),o("：仅系统内部使用。")])],-1),t("ul",null,[t("li",null,[t("p",null,[t("em",null,[t("strong",null,"轮询")]),o("：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 "),t("code",null,"setImmediate()"),o(" 调度的之外），其余情况 node 将在适当的时候在此阻塞。")])]),t("li",null,[t("p",null,[t("em",null,[t("strong",null,"检测")]),o("："),t("code",null,"setImmediate()"),o(" 回调函数在这里执行。")])]),t("li",null,[t("p",null,[t("em",null,[t("strong",null,"关闭的回调函数")]),o("：一些关闭的回调函数，如："),t("code",null,"socket.on('close', ...)"),o("。")])])],-1),t("h5",{id:"node事件循环的基本流程：",tabindex:"-1"},[o("Node事件循环的基本流程： "),t("a",{class:"header-anchor",href:"#node事件循环的基本流程：","aria-hidden":"true"},"#")],-1),t("p",null,"循环开始于icoming触发的poll阶段（出现两种情况）",-1),t("p",null,"轮询队列不为空：循环执行队列中的任务直至队列清空或者硬件使用达到上限",-1),t("p",null,[o("轮询队列为空：首先查看有无注册"),t("code",null,"setImmediate"),o("如果有则切换至check阶段执行setImmediate回调，如果没有则等待回调添加至队列并且立即执行。")],-1),t("h5",{id:"在node11版本后-队列执行宏任务与微任务的方式更改为与浏览器相似的，每执行完一次宏任务变清空当前微任务队列；之前则是在每次阶段切换时清空微任务列表。",tabindex:"-1"},[t("strong",null,"在node11版本后 队列执行宏任务与微任务的方式更改为与浏览器相似的，每执行完一次宏任务变清空当前微任务队列；之前则是在每次阶段切换时清空微任务列表。"),o(),t("a",{class:"header-anchor",href:"#在node11版本后-队列执行宏任务与微任务的方式更改为与浏览器相似的，每执行完一次宏任务变清空当前微任务队列；之前则是在每次阶段切换时清空微任务列表。","aria-hidden":"true"},"#")],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[t("span",{class:"token function"},"setImmediate"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'imme1'"),t("span",{class:"token punctuation"},")"),o("\n  Promise"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"resolve"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n       console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'pro1'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n\n"),t("span",{class:"token function"},"setImmediate"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'imme2'"),t("span",{class:"token punctuation"},")"),o("\n  Promise"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"resolve"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'pro2'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,[t("img",{src:"/blog/node-10-11.png",alt:"image-20200106161724273"})],-1),t("p",null,"不同版本node执行的结果证明了这一点。setImmediate应属于两个在poll轮询队列的宏任务。",-1),t("ul",null,[t("li",null,[t("p",null,"setImmediate与prosecc.nextTick不同"),t("p",null,"setImmediate是将回调添加至当前任务队列的队尾，而process.nextTIck是将回调添加至当前执行栈的最尾。nextTick总是优先于setImmediate执行，由于nextTick是在添加在当前执行栈尾，所以在嵌套使用时候会出现阻塞当前执行栈之后其他任务的执行。")]),t("li",null,[t("p",null,"setImmediate和setTimeout区别"),t("p",null,"两者执行时间都在poll轮询阶段清空轮询队列之后，具体时间点在于setTimeout的回调时间，假如在系统启动执行poll阶段时timer已经可以执行则执行timer再执行setImmediate,")])],-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[o("  "),t("span",{class:"token function"},"setTimeout"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'timer'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),o("\n\n  "),t("span",{class:"token function"},"setImmediate"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token operator"},"=>"),o(),t("span",{class:"token punctuation"},"{"),o("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'setImmediate'"),t("span",{class:"token punctuation"},")"),o("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),o("\n")])])],-1),t("p",null,"此代码输出取决于程序运行至poll阶段是否需要1ms,如果需要则timer--\x3esetImmediate",-1),t("p",null,"但是如果是event loop在执行时已经ready，如将这段代码放置在I/O操作的回调中执行则只会输出setImmediate--\x3etimer。",-1),t("p",null,"所以timer所设置的时间只是系统在尽量接近设定时间去执行并非准确时间，这取决于poll阶段轮询队列耗时。",-1)];var p=n(c,[["render",function(n,t,o,e,c,p){return a(),s("div",null,l)}]]);export{e as __pageData,p as default};
